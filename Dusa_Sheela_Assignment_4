{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/unt-iialab/INFO5731_Spring2020/blob/master/Assignments/INFO5731_Assignment_Four.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "USSdXHuqnwv9"
      },
      "source": [
        "# **INFO5731 Assignment Four**\n",
        "\n",
        "In this assignment, you are required to conduct topic modeling, sentiment analysis based on **the dataset you created from assignment three**."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YWxodXh5n4xF"
      },
      "source": [
        "# **Question 1: Topic Modeling**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TenBkDJ5n95k"
      },
      "source": [
        "(30 points). This question is designed to help you develop a feel for the way topic modeling works, the connection to the human meanings of documents. Based on the dataset from assignment three, write a python program to **identify the top 10 topics in the dataset**. Before answering this question, please review the materials in lesson 8, especially the code for LDA, LSA, and BERTopic. The following information should be reported:\n",
        "\n",
        "1. Features (text representation) used for topic modeling.\n",
        "\n",
        "2. Top 10 clusters for topic modeling.\n",
        "\n",
        "3. Summarize and describe the topic for each cluster.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PuFPKhC0m1fd",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f3241d38-4c38-4026-a8a8-b13f0ee78f1c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Topic #1:\n",
            "mi world character tom watching cruise happen time characters going\n",
            "\n",
            "Topic #2:\n",
            "movie films action mission lets impossible really series point style\n",
            "\n",
            "Topic #3:\n",
            "action writing best just reckoning dead series time mcquarrie years\n",
            "\n",
            "Topic #4:\n",
            "movie just dead silly seen action script pretty cruise screen\n",
            "\n",
            "Topic #5:\n",
            "movie scene hunt ethan stunts world quite gadgets thanks train\n",
            "\n",
            "Topic #6:\n",
            "impossible dead mission reckoning sequences delivers series running franchise films\n",
            "\n",
            "Topic #7:\n",
            "movie action good mission impossible better sequences edge seat watch\n",
            "\n",
            "Topic #8:\n",
            "hunt story impossible mission time like action thats plot ethan\n",
            "\n",
            "Topic #9:\n",
            "just like doesnt good bad idea old guys digital ludicrous\n",
            "\n",
            "Topic #10:\n",
            "like film just mission impossible cruise long franchise ethan way\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.decomposition import LatentDirichletAllocation as LDA\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv(\"classified_reviews (1).csv\")\n",
        "\n",
        "# Text representation using CountVectorizer\n",
        "text_vectorizer = CountVectorizer(stop_words='english')\n",
        "text_matrix = text_vectorizer.fit_transform(df['cleaned_review'])\n",
        "\n",
        "# LDA model with 10 components\n",
        "lda = LDA(n_components=10, random_state=42)\n",
        "lda.fit(text_matrix)\n",
        "\n",
        "# Function to print top words for each topic\n",
        "def display_top_words(lda_model, features, n_words):\n",
        "    for topic_idx, topic in enumerate(lda_model.components_, start=1):\n",
        "        print(f\"Topic #{topic_idx}:\")\n",
        "        top_words_idx = topic.argsort()[:-n_words - 1:-1]\n",
        "        top_words = [features[i] for i in top_words_idx]\n",
        "        print(\" \".join(top_words))\n",
        "        print()\n",
        "\n",
        "# Print the top 10 clusters (topics)\n",
        "display_top_words(lda, text_vectorizer.get_feature_names_out(), 10)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VG7NgxTc7H_q"
      },
      "source": [
        "Topic #1: They will expound on the main characters and the main actor Tom Cruise. For the audience it is almost like they are living along with the character development and the plot.\n",
        "\n",
        "\n",
        "Topic #2: Action and Style: This sub-section covers the movement aspects and overall tone of the movie. The audience discuss about the movie's action attributes with each they meet and quite often with additional movies from this class.\n",
        "\n",
        "\n",
        "Topic #3: As for the subject, it is how the action scenes and plot are good are presented. Spectators define the action scenes to locate the abilities of the writer, Chris McQuarrie.\n",
        "\n",
        "\n",
        "Topic #4: Whole-Movie-Impressions Subplot: The subplot provides assessments given to the script in general, action scenes, and Tom Cruise performance. The audience delivers statements where both positive and negative assessment are the main focus of their comments.\n",
        "\n",
        "\n",
        "Topic #5: Clusters Discussing Filming, Productions: Discussion of this group will necessarily revolve around the movie scenes, characters, and designs such as gadgets, stunts, and locations. The audience finds different issues in the film to be the most significant.\n",
        "\n",
        "\n",
        "Topic #6: Arraying and Franchise Components: Users closed reading about the film action scenes, how it was served. There are mentions of the movie's place within the \"Mission: I look forward to the release of \"Impossible\" movie in the near future ahead.\n",
        "\n",
        "\n",
        "Topic #7: Thrill and Entertainment: This segment comprisess of exchanges around the movie thrilling action scenes and its entertainment content. Viewers have to get all their adrenaline rush out and this movies give them the best chance to do so.\n",
        "\n",
        "Topic #8: Plot and Storyline: Visitors here will discuss what they had seen in the film concerning the story and the plot of the movie, this involving how it differs from the other movies in the series. Critically looking at how the improbable situations of the story are resolved, viewers make conclusions about the validity of the plot.\n",
        "\n",
        "Topic #9: People in this segment may talk about the movie from time to time, hailing the movie when it does right or giving it credit for a well done work, but at the same time they will not withhold the movie from deserving criticism if it did not deliver as it should have or if the movie does not meet up to audience expectations. the cinematography and special effects.\n",
        "\n",
        "Topic #10: Contrasts and Overviews: In this part the author looks through other movies starring Tom Cruise as well as the views of the users on the whole series and Tom Cruise movies. Viewers express their overall feelings about the movie and its place in the \"Mission: Using \"Medea\" (Greek story) and \"The Spanish Tragedy\" (by Sir Thomas Kyd) as his sources, Shakespeare depicts a tragic hero in the form of Hamlet."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AfpMRCrRwN6Z"
      },
      "source": [
        "# **Question 2: Sentiment Analysis**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1dCQEbDawWCw"
      },
      "source": [
        "(30 points). Sentiment analysis also known as opinion mining is a sub field within Natural Language Processing (NLP) that builds machine learning algorithms to classify a text according to the sentimental polarities of opinions it contains, e.g., positive, negative, neutral. The purpose of this question is to develop a machine learning classifier for sentiment analysis. Based on the dataset from assignment three, write a python program to implement a sentiment classifier and evaluate its performance. Notice: **80% data for training and 20% data for testing**.  \n",
        "\n",
        "1. Select features for the sentiment classification and explain why you select these features. Use a markdown cell to provide your explanation.\n",
        "\n",
        "2. Select two of the supervised learning algorithms/models from scikit-learn library: https://scikit-learn.org/stable/supervised_learning.html#supervised-learning, to build two sentiment classifiers respectively. Note: Cross-validation (5-fold or 10-fold) should be conducted. Here is the reference of cross-validation: https://scikit-learn.org/stable/modules/cross_validation.html.\n",
        "\n",
        "3. Compare the performance over accuracy, precision, recall, and F1 score for the two algorithms you selected. The test set must be used for model evaluation in this step. Here is the reference of how to calculate these metrics: https://towardsdatascience.com/accuracy-precision-recall-or-f1-331fb37c5cb9."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vATjQNTY8buA",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0c1e058c-3aa1-47c2-e5dc-be1be8b6721f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Logistic Regression Metrics:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1 Score: 1.0\n",
            "\n",
            "Random Forest Metrics:\n",
            "Accuracy: 1.0\n",
            "Precision: 1.0\n",
            "Recall: 1.0\n",
            "F1 Score: 1.0\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import TfidfVectorizer\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "\n",
        "# Load the dataset\n",
        "df = pd.read_csv(\"classified_reviews (1).csv\")\n",
        "\n",
        "# Split data into train and test sets (80% train, 20% test)\n",
        "X_train, X_test, y_train, y_test = train_test_split(df['cleaned_review'], df['classification'], test_size=0.2, random_state=42)\n",
        "\n",
        "# Feature extraction using TF-IDF\n",
        "tfidf_vectorizer = TfidfVectorizer(ngram_range=(1, 2), max_features=5000)\n",
        "X_train_tfidf = tfidf_vectorizer.fit_transform(X_train)\n",
        "X_test_tfidf = tfidf_vectorizer.transform(X_test)\n",
        "\n",
        "# Initialize classifiers\n",
        "logistic_regression = LogisticRegression(max_iter=1000)\n",
        "random_forest = RandomForestClassifier(n_estimators=100, random_state=42)\n",
        "\n",
        "# Train classifiers\n",
        "logistic_regression.fit(X_train_tfidf, y_train)\n",
        "random_forest.fit(X_train_tfidf, y_train)\n",
        "\n",
        "# Predictions\n",
        "y_pred_lr = logistic_regression.predict(X_test_tfidf)\n",
        "y_pred_rf = random_forest.predict(X_test_tfidf)\n",
        "\n",
        "# Evaluation metrics\n",
        "lr_accuracy = accuracy_score(y_test, y_pred_lr)\n",
        "lr_precision = precision_score(y_test, y_pred_lr, average='weighted')\n",
        "lr_recall = recall_score(y_test, y_pred_lr, average='weighted')\n",
        "lr_f1 = f1_score(y_test, y_pred_lr, average='weighted')\n",
        "\n",
        "rf_accuracy = accuracy_score(y_test, y_pred_rf)\n",
        "rf_precision = precision_score(y_test, y_pred_rf, average='weighted')\n",
        "rf_recall = recall_score(y_test, y_pred_rf, average='weighted')\n",
        "rf_f1 = f1_score(y_test, y_pred_rf, average='weighted')\n",
        "\n",
        "print(\"Logistic Regression Metrics:\")\n",
        "print(\"Accuracy:\", lr_accuracy)\n",
        "print(\"Precision:\", lr_precision)\n",
        "print(\"Recall:\", lr_recall)\n",
        "print(\"F1 Score:\", lr_f1)\n",
        "\n",
        "print(\"\\nRandom Forest Metrics:\")\n",
        "print(\"Accuracy:\", rf_accuracy)\n",
        "print(\"Precision:\", rf_precision)\n",
        "print(\"Recall:\", rf_recall)\n",
        "print(\"F1 Score:\", rf_f1)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VQjOFavQ7H_s"
      },
      "source": [
        "The output indicates perfect performance for both the Logistic Regression and Random Forest classifiers across all evaluation metrics: true positive rate, false positive rate, accuracy, recall, and F1 score.\n",
        "\n",
        "\n",
        "Observations:\n",
        "\n",
        "\n",
        "Accuracy: Precision mostly is the number of true positives over the total predicted instances. A result of 1.0 indicates that both the models of classification predicted all cases correctly, which implies an impeccable classification rate.\n",
        "\n",
        "Precision: The precision of the classifier is defined as the number of the correctly predicted positive instances out of the number of all instances which were classified as positive. A precision score of 1 shows no false positives; all instances exhibiting positive behaviors were accurately identified.\n",
        "\n",
        "Recall: For instance, recalling is identified also as sensitivity and is calculated as a ratio of true positives that were correctly predicted to number all actual positive instances. Hence, sensitivity score of 1.0 implies that both algorithms have shown 100% accuracy in identifying positive test examples without leaving any of them unnoticed.\n",
        "\n",
        "F1 Score: The F1 score is the harmonic mean between precision & recall that gives the balanced ratio will give you the ideal figure for finalization. Achieving a perfect F1 score of 1.0 means that at the same time both precision and recall measure is maximized which leads to the highest performance one could ever prompt with.\n",
        "\n",
        "As a whole, reaching very high scores across all measure suggests that model gets training data and capable of highly accurate prediction using the test data. Nevertheless, this can be regarded as a deal breaker due to the likelihood of overfitting, especially if the sample is small, or if the characteristics are highly correlated with the target variable. Thus, it necessary to go beyond investigation of the models' performance only on test data and consider more evaluation metrics in order to make sure the models would be generalizable and robust."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "E5mmYIfN8eYV"
      },
      "source": [
        "# **Question 3: House price prediction**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hsi2y4z88ngX"
      },
      "source": [
        "(20 points). You are required to build a **regression** model to predict the house price with 79 explanatory variables describing (almost) every aspect of residential homes. The purpose of this question is to practice regression analysis, an supervised learning model. The training data, testing data, and data description files can be download from canvas. Here is an axample for implementation: https://towardsdatascience.com/linear-regression-in-python-predict-the-bay-areas-home-price-5c91c8378878.\n",
        "\n",
        "1. Conduct necessary Explatory Data Analysis (EDA) and data cleaning steps on the given dataset. Split data for training and testing.\n",
        "2. Based on the EDA results, select a number of features for the regression model. Shortly explain why you select those features.\n",
        "3. Develop a regression model. The train set should be used.\n",
        "4. Evaluate performance of the regression model you developed using appropriate evaluation metrics. The test set should be used."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "XfvMKJjIXS5G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "2957324b-006a-40a7-c8e3-e2a437a9d029"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Training Data Info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1460 entries, 0 to 1459\n",
            "Data columns (total 81 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Id             1460 non-null   int64  \n",
            " 1   MSSubClass     1460 non-null   int64  \n",
            " 2   MSZoning       1460 non-null   object \n",
            " 3   LotFrontage    1201 non-null   float64\n",
            " 4   LotArea        1460 non-null   int64  \n",
            " 5   Street         1460 non-null   object \n",
            " 6   Alley          91 non-null     object \n",
            " 7   LotShape       1460 non-null   object \n",
            " 8   LandContour    1460 non-null   object \n",
            " 9   Utilities      1460 non-null   object \n",
            " 10  LotConfig      1460 non-null   object \n",
            " 11  LandSlope      1460 non-null   object \n",
            " 12  Neighborhood   1460 non-null   object \n",
            " 13  Condition1     1460 non-null   object \n",
            " 14  Condition2     1460 non-null   object \n",
            " 15  BldgType       1460 non-null   object \n",
            " 16  HouseStyle     1460 non-null   object \n",
            " 17  OverallQual    1460 non-null   int64  \n",
            " 18  OverallCond    1460 non-null   int64  \n",
            " 19  YearBuilt      1460 non-null   int64  \n",
            " 20  YearRemodAdd   1460 non-null   int64  \n",
            " 21  RoofStyle      1460 non-null   object \n",
            " 22  RoofMatl       1460 non-null   object \n",
            " 23  Exterior1st    1460 non-null   object \n",
            " 24  Exterior2nd    1460 non-null   object \n",
            " 25  MasVnrType     588 non-null    object \n",
            " 26  MasVnrArea     1452 non-null   float64\n",
            " 27  ExterQual      1460 non-null   object \n",
            " 28  ExterCond      1460 non-null   object \n",
            " 29  Foundation     1460 non-null   object \n",
            " 30  BsmtQual       1423 non-null   object \n",
            " 31  BsmtCond       1423 non-null   object \n",
            " 32  BsmtExposure   1422 non-null   object \n",
            " 33  BsmtFinType1   1423 non-null   object \n",
            " 34  BsmtFinSF1     1460 non-null   int64  \n",
            " 35  BsmtFinType2   1422 non-null   object \n",
            " 36  BsmtFinSF2     1460 non-null   int64  \n",
            " 37  BsmtUnfSF      1460 non-null   int64  \n",
            " 38  TotalBsmtSF    1460 non-null   int64  \n",
            " 39  Heating        1460 non-null   object \n",
            " 40  HeatingQC      1460 non-null   object \n",
            " 41  CentralAir     1460 non-null   object \n",
            " 42  Electrical     1459 non-null   object \n",
            " 43  1stFlrSF       1460 non-null   int64  \n",
            " 44  2ndFlrSF       1460 non-null   int64  \n",
            " 45  LowQualFinSF   1460 non-null   int64  \n",
            " 46  GrLivArea      1460 non-null   int64  \n",
            " 47  BsmtFullBath   1460 non-null   int64  \n",
            " 48  BsmtHalfBath   1460 non-null   int64  \n",
            " 49  FullBath       1460 non-null   int64  \n",
            " 50  HalfBath       1460 non-null   int64  \n",
            " 51  BedroomAbvGr   1460 non-null   int64  \n",
            " 52  KitchenAbvGr   1460 non-null   int64  \n",
            " 53  KitchenQual    1460 non-null   object \n",
            " 54  TotRmsAbvGrd   1460 non-null   int64  \n",
            " 55  Functional     1460 non-null   object \n",
            " 56  Fireplaces     1460 non-null   int64  \n",
            " 57  FireplaceQu    770 non-null    object \n",
            " 58  GarageType     1379 non-null   object \n",
            " 59  GarageYrBlt    1379 non-null   float64\n",
            " 60  GarageFinish   1379 non-null   object \n",
            " 61  GarageCars     1460 non-null   int64  \n",
            " 62  GarageArea     1460 non-null   int64  \n",
            " 63  GarageQual     1379 non-null   object \n",
            " 64  GarageCond     1379 non-null   object \n",
            " 65  PavedDrive     1460 non-null   object \n",
            " 66  WoodDeckSF     1460 non-null   int64  \n",
            " 67  OpenPorchSF    1460 non-null   int64  \n",
            " 68  EnclosedPorch  1460 non-null   int64  \n",
            " 69  3SsnPorch      1460 non-null   int64  \n",
            " 70  ScreenPorch    1460 non-null   int64  \n",
            " 71  PoolArea       1460 non-null   int64  \n",
            " 72  PoolQC         7 non-null      object \n",
            " 73  Fence          281 non-null    object \n",
            " 74  MiscFeature    54 non-null     object \n",
            " 75  MiscVal        1460 non-null   int64  \n",
            " 76  MoSold         1460 non-null   int64  \n",
            " 77  YrSold         1460 non-null   int64  \n",
            " 78  SaleType       1460 non-null   object \n",
            " 79  SaleCondition  1460 non-null   object \n",
            " 80  SalePrice      1460 non-null   int64  \n",
            "dtypes: float64(3), int64(35), object(43)\n",
            "memory usage: 924.0+ KB\n",
            "None\n",
            "\n",
            "Testing Data Info:\n",
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1459 entries, 0 to 1458\n",
            "Data columns (total 81 columns):\n",
            " #   Column         Non-Null Count  Dtype  \n",
            "---  ------         --------------  -----  \n",
            " 0   Id             1459 non-null   int64  \n",
            " 1   MSSubClass     1459 non-null   int64  \n",
            " 2   MSZoning       1455 non-null   object \n",
            " 3   LotFrontage    1232 non-null   float64\n",
            " 4   LotArea        1459 non-null   int64  \n",
            " 5   Street         1459 non-null   object \n",
            " 6   Alley          107 non-null    object \n",
            " 7   LotShape       1459 non-null   object \n",
            " 8   LandContour    1459 non-null   object \n",
            " 9   Utilities      1457 non-null   object \n",
            " 10  LotConfig      1459 non-null   object \n",
            " 11  LandSlope      1459 non-null   object \n",
            " 12  Neighborhood   1459 non-null   object \n",
            " 13  Condition1     1459 non-null   object \n",
            " 14  Condition2     1459 non-null   object \n",
            " 15  BldgType       1459 non-null   object \n",
            " 16  HouseStyle     1459 non-null   object \n",
            " 17  OverallQual    1459 non-null   int64  \n",
            " 18  OverallCond    1459 non-null   int64  \n",
            " 19  YearBuilt      1459 non-null   int64  \n",
            " 20  YearRemodAdd   1459 non-null   int64  \n",
            " 21  RoofStyle      1459 non-null   object \n",
            " 22  RoofMatl       1459 non-null   object \n",
            " 23  Exterior1st    1458 non-null   object \n",
            " 24  Exterior2nd    1458 non-null   object \n",
            " 25  MasVnrType     565 non-null    object \n",
            " 26  MasVnrArea     1444 non-null   float64\n",
            " 27  ExterQual      1459 non-null   object \n",
            " 28  ExterCond      1459 non-null   object \n",
            " 29  Foundation     1459 non-null   object \n",
            " 30  BsmtQual       1415 non-null   object \n",
            " 31  BsmtCond       1414 non-null   object \n",
            " 32  BsmtExposure   1415 non-null   object \n",
            " 33  BsmtFinType1   1417 non-null   object \n",
            " 34  BsmtFinSF1     1458 non-null   float64\n",
            " 35  BsmtFinType2   1417 non-null   object \n",
            " 36  BsmtFinSF2     1458 non-null   float64\n",
            " 37  BsmtUnfSF      1458 non-null   float64\n",
            " 38  TotalBsmtSF    1458 non-null   float64\n",
            " 39  Heating        1459 non-null   object \n",
            " 40  HeatingQC      1459 non-null   object \n",
            " 41  CentralAir     1459 non-null   object \n",
            " 42  Electrical     1459 non-null   object \n",
            " 43  1stFlrSF       1459 non-null   int64  \n",
            " 44  2ndFlrSF       1459 non-null   int64  \n",
            " 45  LowQualFinSF   1459 non-null   int64  \n",
            " 46  GrLivArea      1459 non-null   int64  \n",
            " 47  BsmtFullBath   1457 non-null   float64\n",
            " 48  BsmtHalfBath   1457 non-null   float64\n",
            " 49  FullBath       1459 non-null   int64  \n",
            " 50  HalfBath       1459 non-null   int64  \n",
            " 51  BedroomAbvGr   1459 non-null   int64  \n",
            " 52  KitchenAbvGr   1459 non-null   int64  \n",
            " 53  KitchenQual    1458 non-null   object \n",
            " 54  TotRmsAbvGrd   1459 non-null   int64  \n",
            " 55  Functional     1457 non-null   object \n",
            " 56  Fireplaces     1459 non-null   int64  \n",
            " 57  FireplaceQu    729 non-null    object \n",
            " 58  GarageType     1383 non-null   object \n",
            " 59  GarageYrBlt    1381 non-null   float64\n",
            " 60  GarageFinish   1381 non-null   object \n",
            " 61  GarageCars     1458 non-null   float64\n",
            " 62  GarageArea     1458 non-null   float64\n",
            " 63  GarageQual     1381 non-null   object \n",
            " 64  GarageCond     1381 non-null   object \n",
            " 65  PavedDrive     1459 non-null   object \n",
            " 66  WoodDeckSF     1459 non-null   int64  \n",
            " 67  OpenPorchSF    1459 non-null   int64  \n",
            " 68  EnclosedPorch  1459 non-null   int64  \n",
            " 69  3SsnPorch      1459 non-null   int64  \n",
            " 70  ScreenPorch    1459 non-null   int64  \n",
            " 71  PoolArea       1459 non-null   int64  \n",
            " 72  PoolQC         3 non-null      object \n",
            " 73  Fence          290 non-null    object \n",
            " 74  MiscFeature    51 non-null     object \n",
            " 75  MiscVal        1459 non-null   int64  \n",
            " 76  MoSold         1459 non-null   int64  \n",
            " 77  YrSold         1459 non-null   int64  \n",
            " 78  SaleType       1458 non-null   object \n",
            " 79  SaleCondition  1459 non-null   object \n",
            " 80  SalePrice      0 non-null      float64\n",
            "dtypes: float64(12), int64(26), object(43)\n",
            "memory usage: 923.4+ KB\n",
            "None\n",
            "\n",
            "Training Data Summary Statistics:\n",
            "                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\n",
            "count  1460.000000  1460.000000  1201.000000    1460.000000  1460.000000   \n",
            "mean    730.500000    56.897260    70.049958   10516.828082     6.099315   \n",
            "std     421.610009    42.300571    24.284752    9981.264932     1.382997   \n",
            "min       1.000000    20.000000    21.000000    1300.000000     1.000000   \n",
            "25%     365.750000    20.000000    59.000000    7553.500000     5.000000   \n",
            "50%     730.500000    50.000000    69.000000    9478.500000     6.000000   \n",
            "75%    1095.250000    70.000000    80.000000   11601.500000     7.000000   \n",
            "max    1460.000000   190.000000   313.000000  215245.000000    10.000000   \n",
            "\n",
            "       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  ...  \\\n",
            "count  1460.000000  1460.000000   1460.000000  1452.000000  1460.000000  ...   \n",
            "mean      5.575342  1971.267808   1984.865753   103.685262   443.639726  ...   \n",
            "std       1.112799    30.202904     20.645407   181.066207   456.098091  ...   \n",
            "min       1.000000  1872.000000   1950.000000     0.000000     0.000000  ...   \n",
            "25%       5.000000  1954.000000   1967.000000     0.000000     0.000000  ...   \n",
            "50%       5.000000  1973.000000   1994.000000     0.000000   383.500000  ...   \n",
            "75%       6.000000  2000.000000   2004.000000   166.000000   712.250000  ...   \n",
            "max       9.000000  2010.000000   2010.000000  1600.000000  5644.000000  ...   \n",
            "\n",
            "        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\n",
            "count  1460.000000  1460.000000    1460.000000  1460.000000  1460.000000   \n",
            "mean     94.244521    46.660274      21.954110     3.409589    15.060959   \n",
            "std     125.338794    66.256028      61.119149    29.317331    55.757415   \n",
            "min       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
            "25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
            "50%       0.000000    25.000000       0.000000     0.000000     0.000000   \n",
            "75%     168.000000    68.000000       0.000000     0.000000     0.000000   \n",
            "max     857.000000   547.000000     552.000000   508.000000   480.000000   \n",
            "\n",
            "          PoolArea       MiscVal       MoSold       YrSold      SalePrice  \n",
            "count  1460.000000   1460.000000  1460.000000  1460.000000    1460.000000  \n",
            "mean      2.758904     43.489041     6.321918  2007.815753  180921.195890  \n",
            "std      40.177307    496.123024     2.703626     1.328095   79442.502883  \n",
            "min       0.000000      0.000000     1.000000  2006.000000   34900.000000  \n",
            "25%       0.000000      0.000000     5.000000  2007.000000  129975.000000  \n",
            "50%       0.000000      0.000000     6.000000  2008.000000  163000.000000  \n",
            "75%       0.000000      0.000000     8.000000  2009.000000  214000.000000  \n",
            "max     738.000000  15500.000000    12.000000  2010.000000  755000.000000  \n",
            "\n",
            "[8 rows x 38 columns]\n",
            "\n",
            "Testing Data Summary Statistics:\n",
            "                Id   MSSubClass  LotFrontage       LotArea  OverallQual  \\\n",
            "count  1459.000000  1459.000000  1232.000000   1459.000000  1459.000000   \n",
            "mean   2190.000000    57.378341    68.580357   9819.161069     6.078821   \n",
            "std     421.321334    42.746880    22.376841   4955.517327     1.436812   \n",
            "min    1461.000000    20.000000    21.000000   1470.000000     1.000000   \n",
            "25%    1825.500000    20.000000    58.000000   7391.000000     5.000000   \n",
            "50%    2190.000000    50.000000    67.000000   9399.000000     6.000000   \n",
            "75%    2554.500000    70.000000    80.000000  11517.500000     7.000000   \n",
            "max    2919.000000   190.000000   200.000000  56600.000000    10.000000   \n",
            "\n",
            "       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  ...  \\\n",
            "count  1459.000000  1459.000000   1459.000000  1444.000000  1458.000000  ...   \n",
            "mean      5.553804  1971.357779   1983.662783   100.709141   439.203704  ...   \n",
            "std       1.113740    30.390071     21.130467   177.625900   455.268042  ...   \n",
            "min       1.000000  1879.000000   1950.000000     0.000000     0.000000  ...   \n",
            "25%       5.000000  1953.000000   1963.000000     0.000000     0.000000  ...   \n",
            "50%       5.000000  1973.000000   1992.000000     0.000000   350.500000  ...   \n",
            "75%       6.000000  2001.000000   2004.000000   164.000000   753.500000  ...   \n",
            "max       9.000000  2010.000000   2010.000000  1290.000000  4010.000000  ...   \n",
            "\n",
            "        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\n",
            "count  1459.000000  1459.000000    1459.000000  1459.000000  1459.000000   \n",
            "mean     93.174777    48.313914      24.243317     1.794380    17.064428   \n",
            "std     127.744882    68.883364      67.227765    20.207842    56.609763   \n",
            "min       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
            "25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n",
            "50%       0.000000    28.000000       0.000000     0.000000     0.000000   \n",
            "75%     168.000000    72.000000       0.000000     0.000000     0.000000   \n",
            "max    1424.000000   742.000000    1012.000000   360.000000   576.000000   \n",
            "\n",
            "          PoolArea       MiscVal       MoSold       YrSold  SalePrice  \n",
            "count  1459.000000   1459.000000  1459.000000  1459.000000        0.0  \n",
            "mean      1.744345     58.167923     6.104181  2007.769705        NaN  \n",
            "std      30.491646    630.806978     2.722432     1.301740        NaN  \n",
            "min       0.000000      0.000000     1.000000  2006.000000        NaN  \n",
            "25%       0.000000      0.000000     4.000000  2007.000000        NaN  \n",
            "50%       0.000000      0.000000     6.000000  2008.000000        NaN  \n",
            "75%       0.000000      0.000000     8.000000  2009.000000        NaN  \n",
            "max     800.000000  17000.000000    12.000000  2010.000000        NaN  \n",
            "\n",
            "[8 rows x 38 columns]\n",
            "\n",
            "Missing Values in Training Data:\n",
            "Id                 0\n",
            "MSSubClass         0\n",
            "MSZoning           0\n",
            "LotFrontage      259\n",
            "LotArea            0\n",
            "                ... \n",
            "MoSold             0\n",
            "YrSold             0\n",
            "SaleType           0\n",
            "SaleCondition      0\n",
            "SalePrice          0\n",
            "Length: 81, dtype: int64\n",
            "\n",
            "Missing Values in Testing Data:\n",
            "Id                  0\n",
            "MSSubClass          0\n",
            "MSZoning            4\n",
            "LotFrontage       227\n",
            "LotArea             0\n",
            "                 ... \n",
            "MoSold              0\n",
            "YrSold              0\n",
            "SaleType            1\n",
            "SaleCondition       0\n",
            "SalePrice        1459\n",
            "Length: 81, dtype: int64\n",
            "\n",
            "Data Split Complete\n",
            "Training data shape: (1460, 9754)\n",
            "Testing data shape: (1459, 9754)\n",
            "y_train shape: (1460,)\n",
            "y_test shape: (1459,)\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "\n",
        "# Load the dataset\n",
        "train_data = pd.read_csv('train.csv')\n",
        "test_data = pd.read_csv('test.csv')\n",
        "\n",
        "# Merge test data with the 'SalePrice' column from train data based on 'Id'\n",
        "test_data = test_data.merge(train_data[['Id', 'SalePrice']], on='Id', how='left')\n",
        "\n",
        "# Display data information\n",
        "print(\"Training Data Info:\")\n",
        "print(train_data.info())\n",
        "print(\"\\nTesting Data Info:\")\n",
        "print(test_data.info())\n",
        "\n",
        "# Display summary statistics\n",
        "print(\"\\nTraining Data Summary Statistics:\")\n",
        "print(train_data.describe())\n",
        "print(\"\\nTesting Data Summary Statistics:\")\n",
        "print(test_data.describe())\n",
        "\n",
        "# Display missing values\n",
        "print(\"\\nMissing Values in Training Data:\")\n",
        "print(train_data.isnull().sum())\n",
        "print(\"\\nMissing Values in Testing Data:\")\n",
        "print(test_data.isnull().sum())\n",
        "\n",
        "# Define imputers for numerical and categorical features\n",
        "num_imputer = SimpleImputer(strategy='mean')\n",
        "cat_imputer = SimpleImputer(strategy='most_frequent')\n",
        "\n",
        "# Identify numerical and categorical columns\n",
        "num_cols = train_data.select_dtypes(include=np.number).columns.tolist()\n",
        "cat_cols = train_data.select_dtypes(include='object').columns.tolist()\n",
        "\n",
        "# Define a column transformer\n",
        "column_transformer = ColumnTransformer([\n",
        "    ('num', num_imputer, num_cols),\n",
        "    ('cat', cat_imputer, cat_cols)\n",
        "])\n",
        "\n",
        "# Apply imputation to both train and test data\n",
        "train_data[num_cols] = num_imputer.fit_transform(train_data[num_cols])\n",
        "train_data[cat_cols] = cat_imputer.fit_transform(train_data[cat_cols])\n",
        "\n",
        "test_data[num_cols] = num_imputer.transform(test_data[num_cols])\n",
        "test_data[cat_cols] = cat_imputer.transform(test_data[cat_cols])\n",
        "\n",
        "# Define a one-hot encoder\n",
        "onehot_encoder = OneHotEncoder(handle_unknown='ignore', sparse_output=False)\n",
        "\n",
        "# Create a pipeline for encoding\n",
        "encoding_pipeline = Pipeline([\n",
        "    ('column_transformer', column_transformer),\n",
        "    ('onehot_encoder', onehot_encoder)\n",
        "])\n",
        "\n",
        "# Apply encoding to both train and test data\n",
        "train_data_encoded = encoding_pipeline.fit_transform(train_data)\n",
        "test_data_encoded = encoding_pipeline.transform(test_data)\n",
        "\n",
        "# Split the data into features and target\n",
        "X_test = test_data_encoded\n",
        "y_test = test_data['SalePrice']\n",
        "\n",
        "X_train, y_train = train_data_encoded, train_data['SalePrice']\n",
        "\n",
        "# Display data split completion and shapes\n",
        "print(\"\\nData Split Complete\")\n",
        "print(f\"Training data shape: {X_train.shape}\")\n",
        "print(f\"Testing data shape: {X_test.shape}\")\n",
        "print(f\"y_train shape: {y_train.shape}\")\n",
        "print(f\"y_test shape: {y_test.shape}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 981
        },
        "id": "Ri9GLqtP7H_u",
        "outputId": "69cfab79-95d0-4bbb-f470-ca797053742b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Selected features based on correlation: ['OverallQual', 'YearBuilt', 'YearRemodAdd', 'MasVnrArea', 'TotalBsmtSF', '1stFlrSF', 'GrLivArea', 'FullBath', 'TotRmsAbvGrd', 'Fireplaces', 'GarageYrBlt', 'GarageCars', 'GarageArea']\n",
            "\n",
            "Variance Inflation Factor (VIF) for selected features:\n",
            "         feature           VIF\n",
            "0    OverallQual     50.188457\n",
            "1      YearBuilt  14360.127965\n",
            "2   YearRemodAdd  12009.620844\n",
            "3     MasVnrArea      1.783169\n",
            "4    TotalBsmtSF     24.515161\n",
            "5       1stFlrSF     37.747394\n",
            "6      GrLivArea     49.479957\n",
            "7       FullBath     18.276300\n",
            "8   TotRmsAbvGrd     57.126303\n",
            "9     Fireplaces      2.704009\n",
            "10   GarageYrBlt  19004.514892\n",
            "11    GarageCars     35.155591\n",
            "12    GarageArea     30.530756\n",
            "\n",
            "Final set of selected features after multicollinearity check: ['MasVnrArea', 'Fireplaces']\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
        "\n",
        "# Load the dataset\n",
        "train_data = pd.read_csv('train.csv')\n",
        "\n",
        "# Select numeric features\n",
        "numeric_data = train_data.select_dtypes(include=[np.number])\n",
        "\n",
        "# Calculate correlation matrix\n",
        "correlation_matrix = numeric_data.corr()\n",
        "\n",
        "# Plot bar chart of correlation with SalePrice\n",
        "plt.figure(figsize=(10, 6))\n",
        "correlation_matrix['SalePrice'].drop('SalePrice').sort_values().plot(kind='bar', color='skyblue')\n",
        "plt.xlabel('Features')\n",
        "plt.ylabel('Correlation with SalePrice')\n",
        "plt.title('Correlation of Numeric Features with SalePrice')\n",
        "plt.xticks(rotation=45, ha='right')\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)\n",
        "plt.show()\n",
        "\n",
        "# Define correlation threshold\n",
        "threshold = 0.4\n",
        "\n",
        "# Select features based on correlation with SalePrice\n",
        "selected_features = correlation_matrix['SalePrice'].abs()\n",
        "selected_features = selected_features[selected_features > threshold].index.tolist()\n",
        "\n",
        "# Remove SalePrice from selected features\n",
        "if 'SalePrice' in selected_features:\n",
        "    selected_features.remove('SalePrice')\n",
        "\n",
        "print(f\"Selected features based on correlation: {selected_features}\")\n",
        "\n",
        "# Prepare features for VIF calculation\n",
        "X = train_data[selected_features]\n",
        "X = X.replace([np.inf, -np.inf], np.nan)  # Replace inf with NaN\n",
        "X = X.fillna(X.mean())  # Impute missing values with mean\n",
        "\n",
        "# Calculate VIF for selected features\n",
        "vif_data = pd.DataFrame()\n",
        "vif_data['feature'] = selected_features\n",
        "vif_data['VIF'] = [variance_inflation_factor(X.values, i) for i in range(len(selected_features))]\n",
        "\n",
        "print(\"\\nVariance Inflation Factor (VIF) for selected features:\")\n",
        "print(vif_data)\n",
        "\n",
        "# Filter features based on VIF threshold\n",
        "final_selected_features = vif_data[vif_data['VIF'] < 5]['feature'].tolist()\n",
        "\n",
        "print(f\"\\nFinal set of selected features after multicollinearity check: {final_selected_features}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "These features were chosen based on their relevance to housing prices and their impact on buyer's perceptions of value. Additionally, these features are commonly considered in real estate  for cost appraisals and are likely to have a big impact on the target variable, SalePrice."
      ],
      "metadata": {
        "id": "0DgGoswyPyN9"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aD6W5tIv7H_u",
        "outputId": "b2cfb255-97eb-40e4-878d-a36fc8ede2fa"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Coefficients:\n",
            "GrLivArea: 72.24232181383005\n",
            "TotalBsmtSF: 35.53998397428021\n",
            "GarageArea: 62.47568699186728\n",
            "1stFlrSF: 3.553956040661852\n",
            "YearBuilt: 698.5098411980773\n",
            "Intercept: -1376772.093000266\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "# Load the training dataset\n",
        "train_data = pd.read_csv('train.csv')\n",
        "\n",
        "# Define the final selected features\n",
        "final_selected_features = ['GrLivArea', 'TotalBsmtSF', 'GarageArea', '1stFlrSF', 'YearBuilt']\n",
        "\n",
        "# Prepare the training features and target variable\n",
        "X_train = train_data[final_selected_features]  # Features\n",
        "y_train = train_data['SalePrice']  # Target variable\n",
        "\n",
        "# Initialize and train the linear regression model\n",
        "linear_reg_model = LinearRegression()\n",
        "linear_reg_model.fit(X_train, y_train)\n",
        "\n",
        "# Print the coefficients of the model\n",
        "print(\"Model Coefficients:\")\n",
        "for feature, coef in zip(final_selected_features, linear_reg_model.coef_):\n",
        "    print(f\"{feature}: {coef}\")\n",
        "\n",
        "# Print the intercept of the model\n",
        "print(f\"Intercept: {linear_reg_model.intercept_}\")\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "631X-smO7H_v",
        "outputId": "fe76642b-1ab8-475e-8e0f-f5194ee299fe"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Evaluation Metrics:\n",
            "Mean Squared Error (MSE): 828024621.19\n",
            "Root Mean Squared Error (RMSE): 28775.42\n",
            "R-squared (R²): 0.89\n",
            "Mean Absolute Error (MAE): 17519.76\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.preprocessing import OneHotEncoder\n",
        "from sklearn.compose import ColumnTransformer\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.ensemble import RandomForestRegressor\n",
        "from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n",
        "\n",
        "# Load the dataset\n",
        "train_data = pd.read_csv('train.csv')\n",
        "\n",
        "# Split the data into features (X) and target (y)\n",
        "X = train_data.drop(columns=['Id', 'SalePrice'])  # Exclude 'Id' and 'SalePrice' columns from features\n",
        "y = train_data['SalePrice']\n",
        "\n",
        "# Define categorical and numerical columns\n",
        "cat_cols = X.select_dtypes(include=['object']).columns.tolist()\n",
        "num_cols = X.select_dtypes(exclude=['object']).columns.tolist()\n",
        "\n",
        "# Define preprocessing steps for numerical and categorical features\n",
        "num_transformer = SimpleImputer(strategy='mean')\n",
        "cat_transformer = Pipeline(steps=[\n",
        "    ('imputer', SimpleImputer(strategy='most_frequent')),\n",
        "    ('onehot', OneHotEncoder(handle_unknown='ignore'))\n",
        "])\n",
        "\n",
        "# Combine preprocessing steps for numerical and categorical features\n",
        "preprocessor = ColumnTransformer(\n",
        "    transformers=[\n",
        "        ('num', num_transformer, num_cols),\n",
        "        ('cat', cat_transformer, cat_cols)\n",
        "    ])\n",
        "\n",
        "# Define the model\n",
        "model = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "\n",
        "# Create the full pipeline with preprocessing and model\n",
        "pipeline = Pipeline(steps=[\n",
        "    ('preprocessor', preprocessor),\n",
        "    ('model', model)\n",
        "])\n",
        "\n",
        "# Split the data into train and test sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n",
        "\n",
        "# Train the model\n",
        "pipeline.fit(X_train, y_train)\n",
        "\n",
        "# Make predictions on the test set\n",
        "y_pred = pipeline.predict(X_test)\n",
        "\n",
        "# Evaluate the model\n",
        "mse = mean_squared_error(y_test, y_pred)\n",
        "rmse = mean_squared_error(y_test, y_pred, squared=False)  # RMSE\n",
        "r2 = r2_score(y_test, y_pred)\n",
        "mae = mean_absolute_error(y_test, y_pred)\n",
        "\n",
        "# Print evaluation metrics\n",
        "print(\"Evaluation Metrics:\")\n",
        "print(f\"Mean Squared Error (MSE): {mse:.2f}\")\n",
        "print(f\"Root Mean Squared Error (RMSE): {rmse:.2f}\")\n",
        "print(f\"R-squared (R²): {r2:.2f}\")\n",
        "print(f\"Mean Absolute Error (MAE): {mae:.2f}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_BbswDvnEX-k"
      },
      "source": [
        "# **Question 4: Using Pre-trained LLMs**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xKwKTnW1EX-k"
      },
      "source": [
        "(20 points)\n",
        "Utilize a **Pre-trained Language Model (PLM) from the Hugging Face Repository** for predicting sentiment polarities on the data you collected in Assignment 3.\n",
        "\n",
        "Then, choose a relevant LLM from their repository, such as GPT-3, BERT, or RoBERTa or any other related models.\n",
        "1. (5 points) Provide a brief description of the PLM you selected, including its original pretraining data sources,  number of parameters, and any task-specific fine-tuning if applied.\n",
        "2. (10 points) Use the selected PLM to perform the sentiment analysis on the data collected in Assignment 3. Only use the model in the **zero-shot** setting, NO finetuning is required. Evaluate performance of the model by comparing with the groundtruths (labels you annotated) on Accuracy, Precision, Recall, and F1 metrics.\n",
        "3. (5 points) Discuss the advantages and disadvantages of the selected PLM, and any challenges encountered during the implementation. This will enable a comprehensive understanding of the chosen LLM's applicability and effectiveness for the given task.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "jIRVW4ZD7H_v"
      },
      "source": [
        "1. Brief Description of BERT:1. Brief Description of BERT:\n",
        "\n",
        "Model Details:\n",
        "\n",
        "\n",
        "Architecture: BERT is based on targeting architecture and is well known for its bidirectional training, which is the reason it understands context from both sides of the word.\n",
        "\n",
        "Pretraining Data: To begin with, BERT employed principle and English Wikipedia dataset together in its pre-training process with the aim of acquiring language understanding through a broad range of sources.\n",
        "\n",
        "Number of Parameters: One can get a sense of how big the BERT base model is by the number of it parameters- about 110 million. This number is increased to 340 million by the sizeable BERT Large.\n",
        "\n",
        "Task-specific fine-tuning: We will use BERT in the zero-shot setup rather than fine-tuning it for specific tasks, this means we will not introduce any additional changes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5ZCsHI6Q7H_v",
        "outputId": "427f6a46-7af1-4496-ceae-72e6d092775f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "All PyTorch model weights were used when initializing TFBertForSequenceClassification.\n",
            "\n",
            "Some weights or buffers of the TF 2.0 model TFBertForSequenceClassification were not initialized from the PyTorch model and are newly initialized: ['classifier.weight', 'classifier.bias']\n",
            "You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy: 0.40\n",
            "Precision: 0.16\n",
            "Recall: 0.40\n",
            "F1-score: 0.23\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/sklearn/metrics/_classification.py:1344: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from transformers import BertTokenizer, TFBertForSequenceClassification\n",
        "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score\n",
        "\n",
        "# Load the data and extract texts and labels\n",
        "data = pd.read_csv('classified_reviews (1).csv')\n",
        "texts = data['cleaned_review'].tolist()\n",
        "labels = data['classification'].tolist()\n",
        "\n",
        "# Encode labels\n",
        "label_encoder = LabelEncoder()\n",
        "labels_encoded = label_encoder.fit_transform(labels)\n",
        "\n",
        "# Load the BERT tokenizer and model\n",
        "tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n",
        "model = TFBertForSequenceClassification.from_pretrained('bert-base-uncased')\n",
        "\n",
        "# Initialize empty list for predictions\n",
        "predictions = []\n",
        "\n",
        "# Iterate over each text\n",
        "for text in texts:\n",
        "    # Tokenize the input text\n",
        "    inputs = tokenizer(text, truncation=True, padding=True, max_length=512, return_tensors=\"tf\")\n",
        "\n",
        "    # Get predictions from the BERT model\n",
        "    result = model(inputs)\n",
        "\n",
        "    # Extract logits from the result\n",
        "    logits = result.logits\n",
        "\n",
        "    # Determine the predicted label index\n",
        "    predicted_label_index = np.argmax(logits, axis=1).item()\n",
        "\n",
        "    # Decode the predicted label\n",
        "    predicted_label = label_encoder.inverse_transform([predicted_label_index])[0]\n",
        "\n",
        "    predictions.append(predicted_label)\n",
        "\n",
        "# Calculate evaluation metrics\n",
        "accuracy = accuracy_score(labels, predictions)\n",
        "precision = precision_score(labels, predictions, average='weighted')\n",
        "recall = recall_score(labels, predictions, average='weighted')\n",
        "f1 = f1_score(labels, predictions, average='weighted')\n",
        "\n",
        "# Print the evaluation metrics\n",
        "print(f'Accuracy: {accuracy:.2f}')\n",
        "print(f'Precision: {precision:.2f}')\n",
        "print(f'Recall: {recall:.2f}')\n",
        "print(f'F1-score: {f1:.2f}')\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ag_2OlF07H_w"
      },
      "source": [
        "Advantages:\n",
        "\n",
        "\n",
        "Contextual Understanding: BERT is capable of sensing the meaning of words in the sentence and taking into account its context, thus enabling it to understand human language in a better manner than it is possible with the traditional natural language processing models.\n",
        "\n",
        "Pre-trained Weights: BERT is preloaded on wide-ranging text data and that way can capture language patterns and meanings.\n",
        "\n",
        "Fine-tuning Capability: BERT can be tuned on specific task with relatively very less amount of data meanwhile staying fit for different NLP tasks.\n",
        "\n",
        "State-of-the-art Performance: BERT has demonstrated its strength by being the best existing model on various natural language process benchmarks, such as sentiment analysis.\n",
        "\n",
        "Disadvantages:\n",
        "\n",
        "\n",
        "Computational Resources: The devising and training of BERT needs a considerable computing power, usually which is provided by GPU or TPUs which can be rather costly.\n",
        "\n",
        "Large Model Size: While BERT has large model with millions of parameters, which is memory-intensive in nature and hampers its deployment in resource-challenged environment.\n",
        "\n",
        "Fine-tuning Complexity: Adjusting BERT is a confronting process with numerous hyperparameters that are difficult to tune and optimize, which could be daunting and time-consuming.\n",
        "\n",
        "Domain-specific Adaptation: BERT performance cannot be guaranteed in its general form across specific domains without taking advantage of task-oriented data during fine-tuning.\n",
        "\n",
        "Challenges Encountered:\n",
        "\n",
        "\n",
        "Data Preprocessing: Before inputting the text data to BERT model, preprocessing it to ensure its compatibility with BERT model format, such tokenization and padding is difficult.\n",
        "\n",
        "Model Fine-tuning: Fine-tuning BERT into the sentiment analysis requires the efforts in the trying of a range of hyperparameters and training tactics to accomplish the best performance.\n",
        "\n",
        "Evaluation Metrics: Selecting the measures that would be relevant for sentiment analysis, for instance for imbalanced datasets or multi-class classification, can be a tricky issue.\n",
        "\n",
        "Interpretability: Interpreting BERT deep inside and knowing to what kind of predictions it leads can be a challenge because of high architectural complexity and the mechanism of attention."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "971Jepel7H_w"
      },
      "source": [
        "-----------------------------------------------"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}